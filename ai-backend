from flask import Flask, request, jsonify
from flask_cors import CORS
import openai
import os
from dotenv import load_dotenv

load_dotenv()  # Load environment variables from .env file

app = Flask(__name__)
CORS(app)

openai.api_key = os.getenv("OPENAI_API_KEY")

# User Profiles
class UserProfile:
    def __init__(self, user_id, learning_preferences=None, interaction_history=None):
        self.user_id = user_id
        self.learning_preferences = learning_preferences or {}
        self.interaction_history = interaction_history or []

    def update_preferences(self, preferences):
        self.learning_preferences.update(preferences)

    def add_interaction(self, interaction):
        if len(self.interaction_history) >= 50:  # Limit history size
            self.interaction_history.pop(0)
        self.interaction_history.append(interaction)

user_profiles = {}

def get_user_profile(user_id):
    if user_id not in user_profiles:
        user_profiles[user_id] = UserProfile(user_id)
    return user_profiles[user_id]

# Preference Handling
@app.route('/update_preferences', methods=['POST'])
def update_preferences():
    data = request.json
    user_id = data.get('user_id')
    preferences = data.get('preferences')
    if not user_id or not preferences:
        return jsonify({"error": "Missing user_id or preferences"}), 400

    user_profile = get_user_profile(user_id)
    user_profile.update_preferences(preferences)

    return jsonify({"message": "Preferences updated successfully"}), 200

# AI-Customization
def custom_chat_gpt(user_input, user_id):
    if not user_input.strip():
        return "Please enter a question or comment."

    user_profile = get_user_profile(user_id)

    system_message = (
        "Hello, I'm Mr. Harley from New York City. "
        "I'm here to assist you with topics like math, sciences, literature, and so much more!"
    )
    if user_profile.learning_preferences:
        system_message += f" Based on your preferences, I'll focus on {', '.join(user_profile.learning_preferences.keys())}."

    messages = [
        {"role": "system", "content": system_message},
        {"role": "user", "content": user_input}
    ]

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=messages,
            temperature=0.7,
            max_tokens=200,
        )
        chat_gpt_reply = response.choices[0].message.content.strip()
    except Exception as e:
        chat_gpt_reply = "Try that again, sorry!"

    user_profile.add_interaction({"input": user_input, "response": chat_gpt_reply})

    return chat_gpt_reply

@app.route('/chat', methods=['POST'])
def chat():
    data = request.json
    user_input = data.get('user_input')
    user_id = data.get('user_id')
    if not user_input or not user_id:
        return jsonify({"error": "Missing user_input or user_id"}), 400
    
    try:
        chat_response = custom_chat_gpt(user_input, user_id)
        return jsonify({"response": chat_response})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
