import openai
import gradio as gr

openai.api_key = "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"

#User Profiles
class UserProfile:
    def __init__(self, user_id, learning_preferences=None, interaction_history=None):
        self.user_id = user_id
        self.learning_preferences = learning_preferences or {}
        self.interaction_history = interaction_history or []

    def update_preferences(self, preferences):
        self.learning_preferences.update(preferences)

    def add_interaction(self, interaction):
        self.interaction_history.append(interaction)

user_profiles = {}

def get_user_profile(user_id):
    if user_id not in user_profiles:
        user_profiles[user_id] = UserProfile(user_id)
    return user_profiles[user_id]

# AI-Customization
def custom_chat_gpt(user_input, user_id):
    if not user_input.strip():
        return "Please enter a question or comment."

    user_profile = get_user_profile(user_id)

    # Check for preference update command (example: "Set preference: visual")
    if user_input.lower().startswith("set preference:"):
        preference = user_input.split(":", 1)[1].strip()
        user_profile.update_preferences({"learning_style": preference})
        return f"Learning preference updated to {preference}."

    system_message = (
        "Hello, I'm Mr. Harley from New York City. "
        "I'm here to assist you with topics like math, sciences, literature, and so much more!"
    )
    if user_profile.learning_preferences:
        system_message += f" I understand you prefer {user_profile.learning_preferences.get('learning_style', 'various styles')}, so let's continue in that direction."

    messages = [
        {"role": "system", "content": system_message},
        {"role": "user", "content": user_input}
    ]

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=messages,
            temperature=0.7,
            max_tokens=200,
        )
        chat_gpt_reply = response.choices[0].message.content.strip()
    except Exception as e:
        chat_gpt_reply = "Try that again, sorry!"

    user_profile.add_interaction({"input": user_input, "response": chat_gpt_reply})

    return chat_gpt_reply


#Gradio interface
demo = gr.Interface(
    fn=lambda user_input, user_id: custom_chat_gpt(user_input, user_id),
    inputs=[gr.Textbox(label="Ask me anything about special education"), gr.Textbox(label="User ID")],
    outputs=gr.Textbox(label="Response"),
    title="Special Education Assistant"
)

demo.launch()
