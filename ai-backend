from flask import Flask, request, jsonify
from flask_cors import CORS
import openai

app = Flask(__name__)
CORS(app)

openai.api_key = "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"

#User Profiles
class UserProfile:
    def __init__(self, user_id, learning_preferences=None, interaction_history=None):
        self.user_id = user_id
        self.learning_preferences = learning_preferences or {}
        self.interaction_history = interaction_history or []

    def update_preferences(self, preferences):
        self.learning_preferences.update(preferences)

    def add_interaction(self, interaction):
        self.interaction_history.append(interaction)

user_profiles = {}

def get_user_profile(user_id):
    if user_id not in user_profiles:
        user_profiles[user_id] = UserProfile(user_id)
    return user_profiles[user_id]

#AI-Customization
def custom_chat_gpt(user_input, user_id):
    user_profile = get_user_profile(user_id)

    system_message = "I am here to help you with your special education needs."
    if user_profile.learning_preferences:
        system_message += f" I see you prefer {user_profile.learning_preferences.get('learning_style', 'various styles')}. Let's continue in that direction."

    messages = [
        {"role": "system", "content": system_message},
        {"role": "user", "content": user_input}
    ]

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=messages,
        temperature=0.7,
        max_tokens=150,
    )

    chat_gpt_reply = response.choices[0].message.content.strip()
    user_profile.add_interaction({"input": user_input, "response": chat_gpt_reply})

    return chat_gpt_reply

@app.route('/chat', methods=['POST'])
def chat():
    data = request.json
    user_input = data.get('user_input')
    user_id = data.get('user_id')
    if not user_input or not user_id:
        return jsonify({"error": "Missing user_input or user_id"}), 400
    
    try:
        chat_response = custom_chat_gpt(user_input, user_id)
        return jsonify({"response": chat_response})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)